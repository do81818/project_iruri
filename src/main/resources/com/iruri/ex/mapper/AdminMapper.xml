<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.iruri.ex.mapper.AdminMapper">

	<resultMap type="com.iruri.ex.vo.IUserVO" id="iUserMap">
		<result property="userId" column="user_id" />
		<result property="userEmail" column="user_email" />
		<result property="userPw" column="user_pw" />
		<result property="userNickname" column="user_nickname" />
		<result property="userName" column="user_name" />
		<result property="userPhone" column="user_phone" />
		<result property="userSigndate" column="user_signdate" />
		<result property="userPoint" column="user_point" />
		<result property="userBlackList" column="user_blacklist" />
		<result property="userBlaskListReason"
			column="user_blacklist_reason" />
		<collection property="authList" resultMap="authMap" />
		<collection property="classList" resultMap="classMap" />
		<collection property="gradeList" resultMap="gradeMap" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.AuthVO" id="authMap">
		<result property="authNumber" column="auth_number" />
		<result property="authId" column="auth_id" />
		<result property="authContent" column="auth_content" />
		<result property="userId" column="user_id" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.ReportVO" id="reportMap">
		<result property="boardId" column="BOARD_ID" />
		<result property="reportContent" column="REPORT_CONTENT" />
		<result property="reportDate" column="REPORT_DATE" />
		<result property="reportId" column="REPORT_ID" />
		<result property="userId" column="USER_ID" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.PointVO" id="pointMap">
		<result property="pointId" column="point_id" />
		<result property="pointChangedate" column="point_changedate" />
		<result property="pointSavedate" column="point_savedate" />
		<result property="pointState" column="point_state" />
		<result property="pointValue" column="point_value" />
		<result property="pointContent" column="point_content" />
		<result property="userId" column="user_id" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.MoneyVO" id="moneyMap">
		<result property="moneyId" column="money_id" />
		<result property="moneyDate" column="money_date" />
		<result property="moneyInput" column="money_input" />
		<result property="moneyOutput" column="money_output" />
		<result property="payId" column="pay_id" />
		<result property="userID" column="user_id" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.PayVO" id="payMap">
		<result property="payId" column="pay_id" />
		<result property="buyId" column="buy_id" />
		<result property="payState" column="pay_state" />
		<result property="payWay" column="pay_way" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.BuyVO" id="buyMap">
		<result property="buyId" column="buy_id" />
		<result property="buyPoint" column="buy_point" />
		<result property="classId" column="class_id" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.IClassVO" id="classMap">
		<result property="classId" column="class_id" />
		<result property="classTitle" column="class_title" />
		<result property="classState" column="class_state" />
		<result property="classPrice" column="class_pirce" />
		<result property="userId" column="user_id" />
	</resultMap>
	
	<resultMap type="com.iruri.ex.vo.CategoryVO" id="categoryMap">
		<result property="categoryId" column="category_id" />
		<result property="categoryName" column="category_name" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.GradeVO" id="gradeMap">
		<result property="gradeId" column="grade_id" />
		<result property="gradeScore" column="grade_score" />
		<result property="userId" column="user_id" />
		<result property="classId" column="class_id" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.TableJoinVO"
		id="iuserAuthJoinMap">
		<result property="avgGrade" column="grade" />
		<collection property="iuserVo" resultMap="iUserMap" />
		<collection property="authVo" resultMap="authMap" />
	</resultMap>
	
	<resultMap type="com.iruri.ex.vo.TableJoinVO"
		id="monthTotalJoinMap">
		<result property="totalMoney" column="totalMoney" />
		<result property="month" column="month" />
	</resultMap>
	
	<resultMap type="com.iruri.ex.vo.TableJoinVO"
		id="moneyJoinMap">
		<result property="totalMoney" column="totalmoney" />
		<collection property="iuserVo" resultMap="iUserMap" />
		<collection property="moneyVo" resultMap="moneyMap" />
		<collection property="payVo" resultMap="payMap" />
		<collection property="buyVo" resultMap="buyMap" />
		<collection property="iclassVo" resultMap="classMap" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.TableJoinVO"
		id="reportIuserAuthJoinMap">
		<collection property="iuserVo" resultMap="iUserMap" />
		<collection property="authVo" resultMap="authMap" />
		<collection property="reportVo" resultMap="reportMap" />
	</resultMap>

	<resultMap type="com.iruri.ex.vo.TableJoinVO"
		id="userExInfoMap">
		<collection property="iclassVo" resultMap="classMap" />
		<collection property="categoryVo" resultMap="categoryMap" />
	</resultMap>

	<!-- 신고들어온 게시글(신고알림) 리스트 -->
	<!-- 1.페이징처리 안된 리스트 -->
	<select id="getReportList" resultMap="reportIuserAuthJoinMap">
		<![CDATA[
		select r.*, c.user_nickname, c.auth_content 
		from report r,
		    (select b.board_id, u.user_id, u.user_nickname, u.auth_content 
			from board b, 
				(select distinct iuser.user_id as user_id, iuser.user_nickname as user_nickname, 
		        	     authority.auth_content as auth_content
		     	from authority, iuser 
		     	where authority.user_id = iuser.user_id) u
			where b.user_id = u.user_id order by b.board_id desc) c
		where r.board_id = c.board_id order by report_id desc
		]]>
	</select>
	
	
	
	<!-- 2.페이징처리 리스트 -->
	<select id="getReportListWithPaging"
		resultMap="reportIuserAuthJoinMap">
		<![CDATA[
		select *
		from (
		select rownum rn, li.*
		from (
			select r.report_id, r.board_id, r.report_content, b.user_id, u.user_nickname, a.auth_content
			from report r
			inner join board b
			on r.board_id = b.board_id
			inner join iuser u
			on u.user_id = b.user_id
			inner join authority a
			on u.user_id = a.user_id
			order by r.report_id desc
		) li
		where rownum <= #{pageNum} * #{amount}
			)
		where rn > (#{pageNum} - 1) * #{amount}

		]]>
	</select>
	
	<!-- 3.리스트 갯수 -->
	<select id="countReportId" resultType="Integer">
		<![CDATA[
		select count(REPORT_ID) from report
		]]>
	</select>
	
	<!-- 일반/유료회원 리스트 -->
	<select id="getNormalUserList" resultMap="iuserAuthJoinMap">
		<![CDATA[
		select *
		from (
		select rownum rn, li.*
		from (
		select distinct u.user_id, a.auth_id, a.auth_content, u.user_nickname, u.user_email, u.user_signdate, u.user_blacklist, u.user_blacklist_reason
		    from iuser u, (select user_id, auth_id, auth_content from authority where auth_id = 1 or auth_id = 2 ) a
		where u.user_id = a.user_id and u.user_blacklist = 0 order BY u.user_id desc
		) li
		where rownum <= #{pageNum} * #{amount}
			)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<!-- 일반/유료회원 리스트 갯수 -->
	<select id="countNormalMember" resultType="Integer">
		<![CDATA[
		select count(li.user_id)
		from (
		    select distinct u.user_id, a.auth_content, u.user_nickname, u.user_email, u.user_signdate, u.user_blacklist, u.user_blacklist_reason
		    from iuser u, (select user_id, auth_content from authority where auth_id = 1 or auth_id = 2) a
		    where u.user_id = a.user_id and u.user_blacklist = 0 order BY u.user_id desc
		    ) li
		]]>
	</select>
	
	<!-- 일반/유료회원 블랙리스트 -->
	<select id="getNormalUserBlackList" resultMap="iuserAuthJoinMap">
		<![CDATA[
		select *
		from (
		select rownum rn, li.*
		from (
		select distinct u.user_id, a.auth_content, u.user_nickname, u.user_email, u.user_signdate, u.user_blacklist, u.user_blacklist_reason
		    from iuser u, (select user_id, auth_content from authority where auth_id = 1 or auth_id = 2) a
		where u.user_id = a.user_id and u.user_blacklist = 1 order BY u.user_id desc
		) li
		where rownum <= #{pageNum} * #{amount}
			)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<!-- 일반/유료회원 블랙리스트 갯수 -->
	<select id="countNormalBlackMember" resultType="Integer">
		<![CDATA[
		select count(li.user_id)
		from (
		    select distinct u.user_id, a.auth_content, u.user_nickname, u.user_email, u.user_signdate, u.user_blacklist, u.user_blacklist_reason
		    from iuser u, (select user_id, auth_content from authority where auth_id = 1 or auth_id = 2) a
		    where u.user_id = a.user_id and u.user_blacklist = 1 order BY u.user_id desc
		    ) li
		]]>
	</select>
	
	
	<!-- 트레이너 회원 리스트 -->
	<select id="getTrainerMemberList" resultMap="iuserAuthJoinMap">
		<![CDATA[  
		select *
		from (
		select rownum rn, li.*
		from (
			select * from(
			select u.user_id, u.user_nickname, u.user_email, a.auth_content, (avg(g.grade_score)+u.user_id) as grade
			from iuser u
			inner join authority a
			on u.user_id = a.user_id and a.auth_id = 3 and u.user_blacklist = 0
			left outer join iclass c
			on u.user_id = c.user_id
			left outer join grade g
			on c.class_id = g.class_id
			group by u.user_id, a.auth_content, u.user_nickname, u.user_email) tr
		]]>
			<if test= 'keyword != null and !keyword.equalsIgnoreCase("iruriAdmin15978213")'>
			<![CDATA[
				where tr.user_nickname like '%' || #{keyword} || '%' or tr.user_email like '%' || #{keyword} ||'%'
			]]>	
			</if>
			
		<![CDATA[  	
			order by tr.user_id desc
		) li
		where rownum <= #{pageNum} * #{amount}
			)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<!-- 트레이너회원 리스트 갯수 -->
	<select id="countTrainerMemberList" resultType="Integer">
		<![CDATA[
		select count(li.user_id)
		from(
			select * from(
			select u.user_id, u.user_nickname, u.user_email, a.auth_content, (avg(g.grade_score)+u.user_id) as grade
			from iuser u
			inner join authority a
			on u.user_id = a.user_id and a.auth_id = 3 and u.user_blacklist = 0
			left outer join iclass c
			on u.user_id = c.user_id
			left outer join grade g
			on c.class_id = g.class_id
			group by u.user_id, a.auth_content, u.user_nickname, u.user_email) tr
		]]>
			<if test= 'keyword != null and !keyword.equalsIgnoreCase("iruriAdmin15978213")'>
			<![CDATA[
				where tr.user_nickname like '%' || #{keyword} || '%' or tr.user_email like '%' || #{keyword} ||'%'
			]]>	
			</if>
			
		<![CDATA[  	
			order by tr.user_id desc
		) li
		]]>
	</select>
	
	<!-- 트레이너 회원 블랙리스트 -->
	<select id="getTrainerBlackList" resultMap="iuserAuthJoinMap">
		<![CDATA[
		select *
		from (
		select rownum rn, li.*
		from (
			select u.user_id, a.auth_content, u.user_nickname, u.user_email, (avg(g.grade_score)+u.user_id) as grade
			from iuser u
			inner join authority a
			on u.user_id = a.user_id and a.auth_id = 3 and u.user_blacklist = 1
			left outer join iclass c
			on u.user_id = c.user_id
			left outer join grade g
			on c.class_id = g.class_id
			group by u.user_id, a.auth_content, u.user_nickname, u.user_email
			order by u.user_id desc
		) li
		where rownum <= #{pageNum} * #{amount}
			)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	<!-- 트레이너 회원 블랙리스트 갯수 -->
	<select id="countTrainerBlackList" resultType="Integer">
		<![CDATA[
		select count(li.user_id)
		from (
			select u.user_id, a.auth_content, u.user_nickname, u.user_email, (avg(g.grade_score)+u.user_id) as grade
			from iuser u
			inner join authority a
			on u.user_id = a.user_id and a.auth_id = 3 and u.user_blacklist = 1
			left outer join iclass c
			on u.user_id = c.user_id
			left outer join grade g
			on c.class_id = g.class_id
			group by u.user_id, a.auth_content, u.user_nickname, u.user_email
			order by u.user_id desc
		) li
		]]>
	</select>
	
	<!-- 트레이너 등록 -->
	<insert id="trainerRegistInsert"
		parameterType="com.iruri.ex.vo.IUserVO">
		INSERT INTO iuser (
		USER_ID, USER_EMAIL, USER_PW,
		USER_NICKNAME, USER_NAME, USER_PHONE,
		USER_SIGNDATE, USER_POINT,
		USER_BLACKLIST
		) VALUES (
		(select max(user_id)+1 from iuser),
		#{userEmail}, #{userPw}, #{userName}, #{userName}, #{userPhone},
		default, default, default
		)
	</insert>
	
	<!-- 트레이너 등록 후 권한 변경 -->
	<update id="trainerAuthUpdate">
		UPDATE authority SET auth_id = '3', auth_content =
		'ROLE_TRAINER'
		where user_id= (select max(user_id) from authority)
	</update>


	<!-- 일반/트레이너회원정보 보기 -->
	<select id="getUserBasicInfo" parameterType="int"
		resultMap="iuserAuthJoinMap">
		<![CDATA[
			select u.*, a.*
			from iuser u join authority a
			on u.user_id = a.user_id where a.user_id = #{userId}
		]]>
	</select>
	
	<!-- 일반회원정보 포인트리스트 보기 -->
	<select id="getUserBasicInfoPoint" resultMap="pointMap">
		<![CDATA[
		select *
		from (
			select rownum rn, li.*
			from (
				select * from ipoint where not point_state = 'appointed' and user_id = #{userId}
				order by point_id desc
				) li
			where rownum <= #{pageNum} * #{amount}
				)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>

	<!-- 일반회원정보 포인트리스트 갯수보기 -->
	<select id="countUserBasicInfoPoint" resultType="Integer">
		<![CDATA[
		select count(point_id) from ipoint where not point_state = 'appointed' and user_id = #{userId}
		]]>
	</select>

	<!-- 일반/유료회원 현재보유포인트 -->
	<select id="getUserBasicInfoPointTotal" resultType="Integer">
		<![CDATA[
		select DISTINCT 
		((select sum(point_value)from ipoint where user_id = #{user_id} and point_state = 'save')
		- (select sum(point_value)from ipoint where user_id = #{user_id} and point_state = 'use')) as total_point
		from ipoint where user_id=#{user_id}
		]]>
	</select>
	
	<!-- 일반/유료회원 포인트 수정 -->
	<insert id="insertPoint">
	INSERT INTO ipoint VALUES ((select max(point_id) from ipoint)+1, sysdate, sysdate, #{pointState}, #{pointValue}, '관리자 이벤트 포인트', #{userId})
	</insert>

	<!-- 일반회원 보유포인트 수정 -->
	<update id="updatePoint">
	UPDATE iuser  SET user_point = #{userPoint} where user_id = #{userId}
	</update>


	<!-- 일반회원정보 운동정보 리스트 -->
	<select id="getUserExInfoList" resultMap="userExInfoMap">
		<![CDATA[
		select *
		from (
			select rownum rn, li.*
			from (
				select b.user_id, iclass.class_id, iclass.class_state, category.category_name, iclass.class_title, iclass.category_id
				from iclass, category, (select class_id, user_id from buy
				            where user_id = #{userId} 
				            and buy_id = any (select buy_id from pay where pay_state = 'pay')) b
				where iclass.class_id = b.class_id and iclass.category_id = category.category_id
		]]>
				<choose>
					<when test='categoryId eq 2'>
					<![CDATA[
						and category.category_id = 2
					]]> 
					</when>
					<when test='categoryId eq 1'>
					<![CDATA[
						and category.category_id = 1
					]]> 
					</when>
				</choose>
		<![CDATA[
				order by iclass.class_id desc
				) li
			where rownum <= #{pageNum} * #{amount}
				)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>


	<!-- 일반회원정보 운동정보 갯수 -->
	<select id="countUserExInfoList" resultType="Integer">
		<![CDATA[
		select count(li.class_id)
		from (
				select b.user_id, iclass.class_id, iclass.class_state, category.category_name, iclass.class_title, iclass.category_id
				from iclass, category, (select class_id, user_id from buy
				            where user_id = #{userId} 
				            and buy_id = any (select buy_id from pay where pay_state = 'pay')) b
				where iclass.class_id = b.class_id and iclass.category_id = category.category_id
		]]>
				<choose>
					<when test='categoryId eq 2'>
					<![CDATA[
						and category.category_id = 2
					]]> 
					</when>
					<when test='categoryId eq 3'>
					<![CDATA[
						and category.category_id = 3
					]]> 
					</when>
				</choose>
		<![CDATA[
				order by iclass.class_id desc
		) li
		]]>
	</select>


	<!-- 트레이너 별 평점 -->
	<select id="getTrainerGrade" resultType="String">
		<![CDATA[  
		select round(avg(g.grade_score),1) as grade
		from iuser u, iclass c, grade g
		where u.user_id = c.user_id and c.class_id = g.class_id
		group by u.user_id
		having u.user_id = #{userId}
		]]>
	</select>


	<!-- 트레이너정보_수익관리 리스트 -->
	<select id="getTrainerMoneyList" resultMap="moneyJoinMap">
		<![CDATA[
		select *
		from (
			select rownum rn, li.*
			from (
				select a.*, sum(a.total) over(order by rowId) totalMoney
				from (
				    select m.money_id, m.money_date, m.money_input, m.money_output, u.user_nickname, b.buy_point, p.pay_state, c.class_title, (m.money_input - m.money_output) as total
				    from money m
				    inner join pay p
				    on m.pay_id = p.pay_id
				    INNER join buy b
				    on p.buy_id = b.buy_id
				    inner join iclass c
				    on b.class_id = c.class_id and c.user_id = #{userId}
				    inner join iuser u
				    on m.user_id = u.user_id
				    where m.money_date between (trunc(add_months(sysdate,#{month}), 'mm')) and last_day(add_months(sysdate,#{month}))
				    ) a
				    order by a.money_id desc
				) li
			where rownum <= #{pageNum} * #{amount}
				)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>


	<!-- 트레이너정보_수익관리 리스트 갯수 -->
	<select id="countTrainerMoneyList" resultType="Integer">
		<![CDATA[
		select count(li.money_id)
		from (
		select a.*, sum(a.total) over(order by rowId) totalMoney
		from (
		    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_input - m.money_output) as total
		    from money m
		    inner join pay p
		    on m.pay_id = p.pay_id
		    INNER join buy b
		    on p.buy_id = b.buy_id
		    inner join iclass c
		    on b.class_id = c.class_id and c.user_id = #{userId}
		    inner join iuser u
		    on m.user_id = u.user_id
		    where m.money_date between (trunc(add_months(sysdate,#{month}), 'mm')) and last_day(add_months(sysdate,#{month}))
		    ) a
		) li
		]]>
	</select>
	
	<!-- 트레이너정보_수익관리 월별 수익 합계 -->
	<select id="trainerMoneyMonthTotal" parameterType="int" resultType="Integer">
		<![CDATA[
		select sum(a.money_input + a.buy_point - a.money_output)
		from (
		    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_input - m.money_output) as total
		    from money m
		    inner join pay p
		    on m.pay_id = p.pay_id
		    INNER join buy b
		    on p.buy_id = b.buy_id
		    inner join iclass c
		    on b.class_id = c.class_id and c.user_id = #{userId}
		    inner join iuser u
		    on m.user_id = u.user_id
		    where m.money_date between (trunc(add_months(sysdate,#{month}), 'mm')) and last_day(add_months(sysdate,#{month}))
		    ) a
		]]>
	</select>
	
	<!-- 블랙리스트/일반 회원으로 등록(전환) -->
	<update id = "updateBlackList">
		update iuser set user_blacklist = #{number} where user_id = #{userId}
	</update>
	
	<!-- 블랙리스트 회원 이유 등록 -->
	<update id = "updateBlackListReason">
		update iuser set user_blacklist_reason = #{reason} where user_id = #{userId}
	</update>
	
	<!-- 탈퇴회원으로 전환 -->
	<update id = "updateWithdrawMember">
		UPDATE authority SET auth_content = 'ROLE_LEAVE' WHERE user_id = #{userId}
	</update>
	
	
	
	 <!-- 수익관리 - 전체수익 매출리스트 -->
	<select id="getTotalMoneyInOutList" resultMap="moneyJoinMap">
		<![CDATA[
		select *
		from (
			select rownum rn, li.*
			from (
				select a.*, sum(a.total) over(order by rowId) totalMoney
				from (
			]]>
			
			<!-- 전체내역 볼 때 -->	    
			<if test='inquire == "all"'>	    
			<![CDATA[	
				    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_input - m.money_output) as total
			]]>
			</if>
			
			<!-- 입금내역만 볼 때 -->
			<if test='inquire == "input"'>
			<![CDATA[	
				    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_input) as total
			]]>
			</if>
			
			<!-- 출금내역만 볼 때 -->
			<if test='inquire == "output"'>
			<![CDATA[	
				    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_output) as total
			]]>
			</if>
			
			<![CDATA[
				   from money m
				    inner join pay p
				    on m.pay_id = p.pay_id
				    INNER join buy b
				    on p.buy_id = b.buy_id
				    inner join iclass c
				    on b.class_id = c.class_id
		    ]]> 
		    <!-- 트레이너별 내역보기 -->
		    <if test ='userId != 0'>
			<![CDATA[		
				and c.user_id = #{userId}	
			]]>
			</if>
		    <![CDATA[
				    inner join iuser u
				    on m.user_id = u.user_id
		    ]]>
			<!-- 기간을 선택했을 때 -->	    
			<if test='periodStartDate != "0" and !periodEndDate.equals("0")'>
			<![CDATA[	
				    where m.money_date between TO_DATE(#{periodStartDate}, 'YYYY-MM-DD') and TO_DATE(#{periodEndDate}, 'YYYY-MM-DD') 
			]]>
			</if>
			
			<!-- 입금내역만 볼 때 -->
			<if test='inquire == "input"'>
			<![CDATA[	
				    and m.money_input > 0
			]]>
			</if>
			
			<!-- 출금내역만 볼 때 -->
			<if test='inquire == "output"'>
			<![CDATA[	
				    and m.money_output > 0
			]]>
		    </if>
				    
			<![CDATA[	    
				    ) a
				    order by a.money_id desc
				) li
				]]> 
			
			
			<![CDATA[
			where rownum <= #{pageNum} * #{amount}
				)
		where rn > (#{pageNum} - 1) * #{amount}
		]]>
	</select>
	
	
	<!-- 수익관리 - 전체수익 매출리스트 갯수 -->
	<select id="countTotalMoneyInOutList" resultType="Integer">
		<![CDATA[
		select count(li.money_id)
		from (
				select a.*, sum(a.total) over(order by rowId) totalMoney
				from (
			]]>
			
			<!-- 전체내역 볼 때 -->	    
			<if test='inquire == "all"'>	    
			<![CDATA[	
				    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_input - m.money_output) as total
			]]>
			</if>
			
			<!-- 입금내역만 볼 때 -->
			<if test='inquire == "input"'>
			<![CDATA[	
				    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_input) as total
			]]>
			</if>
			
			<!-- 출금내역만 볼 때 -->
			<if test='inquire == "output"'>
			<![CDATA[	
				    select m.*, u.user_nickname, b.buy_point, p.pay_state, c.class_id, c.class_title, (m.money_output) as total
			]]>
			</if>
			
			<![CDATA[
				   from money m
				    inner join pay p
				    on m.pay_id = p.pay_id
				    INNER join buy b
				    on p.buy_id = b.buy_id
				    inner join iclass c
				    on b.class_id = c.class_id
		    ]]> 
		    <!-- 트레이너별 내역보기 -->
		    <if test ='userId != 0'>
			<![CDATA[		
				and c.user_id = #{userId}	
			]]>
			</if>
		    <![CDATA[
				    inner join iuser u
				    on m.user_id = u.user_id
				    ]]> 
			
			<!-- 기간을 선택했을 때 -->	    
			<if test='periodStartDate != "0" and !periodEndDate.equals("0")'>
			<![CDATA[	
				    where m.money_date between TO_DATE(#{periodStartDate}, 'YYYY-MM-DD') and TO_DATE(#{periodEndDate}, 'YYYY-MM-DD') 
			]]>
			</if>
			
			<!-- 입금내역만 볼 때 -->
			<if test='inquire == "input"'>
			<![CDATA[	
				    and m.money_input > 0
			]]>
			</if>
			
			<!-- 출금내역만 볼 때 -->
			<if test='inquire == "output"'>
			<![CDATA[	
				    and m.money_output > 0
			]]>
		    </if>
				    
			<![CDATA[	    
				    ) a
				    order by a.money_id desc
				) li
			]]> 
	</select>

	<!-- 트레이너별 수익관리 트레이너 검색 -->
	<select id="getTrainerSearchList" resultMap="iuserAuthJoinMap">
		<![CDATA[  
		select tr.*
			from (select u.*, a.auth_content
			from iuser u, authority a
			where u.user_id = a.user_id and a.auth_id = 3) tr
		]]>
		
		<if test= 'keyword != null and !keyword.equalsIgnoreCase("iruriAdmin15978213")'>
			<![CDATA[
				where tr.user_name like '%' || #{keyword} || '%' or tr.user_nickname like '%' || #{keyword} || '%'
			]]>	
		</if>
	</select>
	
	<!-- 오늘의 매출 -전체 -->
	<select id="sumTodayMoneyAll" resultType="Integer">
		<![CDATA[  
		select sum(money_input - money_output)
		from money
		where money_date = sysdate
		]]>
	</select>
	
	<!-- 오늘의 매출 - 트레이너 -->
	<select id="sumTodayMoneyTrainer" resultType="Integer">
		<![CDATA[  
		select sum(pa.tot - ca.tot) as total
		from (
		select nvl(sum(b.buy_point + m.money_input), 0) as tot
		from money m
		inner join pay p
		on m.pay_id = p.pay_id and p.pay_state = 'pay'
		inner join buy b
		on b.buy_id = p.buy_id
		inner join iclass c
		on b.class_id = c.class_id and c.user_id = #{userId}
		where m.money_date = sysdate
		) pa, (
		select nvl(sum(b.buy_point + m.money_output), 0) as tot
		from money m
		inner join pay p
		on m.pay_id = p.pay_id and p.pay_state = 'cancle'
		inner join buy b
		on b.buy_id = p.buy_id
		inner join iclass c
		on b.class_id = c.class_id and c.user_id = #{userId}
		where m.money_date = sysdate
		) ca
		]]>
	</select>
	
	<!-- 월별 수익 -전체 -->
	<select id="sumMonthMoneyAll" resultMap="monthTotalJoinMap">
		<![CDATA[  
		select to_char(m.money_date, 'mm') as month , nvl(sum(m.money_input- m.money_output),0) as totalMoney
		from money m
		group by to_char(m.money_date, 'mm')
		]]>
	</select>
	
	<!-- 월별 수익 -트레이너 -->
	<select id="sumMonthMoneyTrainer" resultMap="monthTotalJoinMap">
		<![CDATA[  
		select (m_in.mon) as month, sum(nvl(m_in.intot,0) - nvl(m_out.outtot,0)) as totalMoney
		from (
		select to_char(m.money_date, 'mm') as mon, sum(b.buy_point + m.money_input) as intot
		from iclass c
		inner join buy b
		on c.class_id = b.class_id
		inner join pay p
		on b.buy_id = p.buy_id and p.pay_state = 'pay'
		inner join money m
		on m.pay_id = p.pay_id
		where c.user_id = #{userId}
		group by to_char(m.money_date, 'mm')
		) m_in
		full outer join (
		select to_char(m.money_date, 'mm') as mon, sum(b.buy_point + m.money_output) as outtot
		from iclass c
		inner join buy b
		on c.class_id = b.class_id
		inner join pay p
		on b.buy_id = p.buy_id and p.pay_state = 'cancle'
		inner join money m
		on m.pay_id = p.pay_id
		where c.user_id = #{userId}
		group by to_char(m.money_date, 'mm')
		) m_out
		on m_in.mon = m_out.mon
		group by m_in.mon
		]]>
	</select>
	
	
</mapper>